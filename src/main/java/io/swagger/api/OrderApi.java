/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Order;
import io.swagger.annotations.*;
import io.swagger.model.Pizza;
import io.swagger.model.Store;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-11-10T04:12:11.857Z")

@Api(value = "order", description = "the order API")
public interface OrderApi {

    @ApiOperation(value = "delete customer order", nickname = "deleteCustomerOrder", notes = "delete customer order", tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully deleted customer order"),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAllCustomerOrders();


    @ApiOperation(value = "deletes the entire order", nickname = "deleteOrder", notes = "Deletes an order", tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully deleted order"),
            @ApiResponse(code = 400, message = "invalid input, object invalid")})
    @RequestMapping(value = "/order/{orderID}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrderById(@ApiParam(value = "ID of the order", required = true) @PathVariable("orderID") String orderID);


    @ApiOperation(value = "customer order", nickname = "getAllCustomersOrders", notes = "Returns all customers' orders", response = Order.class, responseContainer = "List", tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully returned customers' orders", response = Order.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Order>> getAllCustomersOrders();


    @ApiOperation(value = "list the pizzas from the given orderID", nickname = "getPizzasByOrderID", notes = "Returns a list of Pizza objects from a given store", response = Order.class, responseContainer = "List", tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully returned pizzas from storeID", response = Order.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order/{orderID}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Order> getOrderByID(@ApiParam(value = "the order ID", required = true) @PathVariable("orderID") String orderID);


    @ApiOperation(value = "post customer order", nickname = "postCustomerOrder", notes = "post customer order", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully posted customer order", response = Object.class),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Order> postCustomerOrder(@ApiParam(value = "Order objected that is posted", required = true) @Valid @RequestBody Order body);


    @ApiOperation(value = "put customer order", nickname = "putCustomerOrder", notes = "put customer order", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully updated customer order", response = Object.class),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Order> putCustomerOrder(@ApiParam(value = "Order object that is updated", required = true) @Valid @RequestBody Order body);

    @ApiOperation(value = "returns all pizza instances being offered by the specific orderID", nickname = "getAllPizzasByOrderID", notes = "Returns pizzas in that specific order", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully returned all pizzas in that specific order", response = Object.class),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order/{orderID}/pizza",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Pizza>> getAllPizzasByOrderID(@ApiParam(value = "orderID to get all pizza list in that specific order", required = true) @PathVariable("orderID") String orderID);

    @ApiOperation(value = "deletes all pizza instances being offered by the given orderID", nickname = "deleteAllPizzasByOrderID", notes = "deletes all pizzas from the specific order using orderID", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully deletes all the pizzas in that specific order", response = Object.class),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order/{orderID}/pizza",
            method = RequestMethod.DELETE)
    ResponseEntity<List<Pizza>> deleteAllPizzasByOrderID(@ApiParam(value = "ID of the given order", required = true) @PathVariable("orderID") String orderID);


    @ApiOperation(value = "gets the order and pizza from that given order and pizza ID", nickname = "getPizzaByIDAndOrderID", notes = "Returns pizza in that given order", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully returned all the menu items at a given store", response = Object.class),
            @ApiResponse(code = 400, message = "bad input parameter, object invalid")})
    @RequestMapping(value = "/order/{orderID}/pizza/{pizzaID}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Pizza> getPizzaByIDAndOrderID(@ApiParam(value = "ID of the given pizza", required = true) @PathVariable("orderID") String orderID, @ApiParam(value = "ID of the pizza", required = true) @PathVariable("pizzaID") String pizzaID);

    @ApiOperation(value = "adds pizza to given order by order ID", nickname = "addPizzaByIDAndOrderID", notes = "adds a pizza to the order", tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid input")})
    @RequestMapping(value = "/order/{orderID}/pizza/{pizzaID}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Order> addPizzaByIDAndOrderID(@ApiParam(value = "orderID that the pizza is being added to", required = true) @PathVariable("orderID") String orderID, @ApiParam(value = "ID of the pizza", required = true) @PathVariable("pizzaID") String pizzaID);

    @ApiOperation(value = "deletes pizza from order", nickname = "deletePizzaByOrder", notes = "Deletes pizza", tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "successfully deleted order"),
            @ApiResponse(code = 400, message = "invalid input, object invalid")})
    @RequestMapping(value = "/order/{orderID}/pizza/{pizzaID}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePizzaByOrder(@ApiParam(value = "ID of the given order", required = true) @PathVariable("orderID") String orderID, @ApiParam(value = "ID of the pizza", required = true) @PathVariable("pizzaID") String pizzaID);

    @ApiOperation(value = "post store by OrderId and StoreId", nickname = "postStoreByIDAndOrderID", notes = "this posts a store from a specific order", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "successfully post order id and store id", response = Object.class),
            @ApiResponse(code = 400, message = "invalid input, order object invalid")})
    @RequestMapping(value = "/order/{orderID}/store/{storeID}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Order> postStoreByIDAndOrderID(@ApiParam(value = "posted order by order and store ID", required = true) @PathVariable("orderID") String orderID, @ApiParam(value = "posted store ID", required = true) @PathVariable("storeID") String storeID);

    @ApiOperation(value = "get store by OrderId and StoreId", nickname = "getStoreByIDAndOrderID", notes = "this gets a store from a specific order", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully got store by order id and store id", response = Object.class),
            @ApiResponse(code = 400, message = "invalid input, order object invalid")})
    @RequestMapping(value = "/order/{orderID}/store/{storeID}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Store> getStoreByIDAndOrderID(@ApiParam(value = "get the order and store ID", required = true) @PathVariable("orderID") String orderID, @ApiParam(value = "get store ID", required = true) @PathVariable("storeID") String storeID);

    @ApiOperation(value = "delete store associated with order by OrderId and StoreId", nickname = "deleteStoreByIDAndOrderID", notes = "delete store associated with order by OrderId and StoreId", response = Object.class, tags = {"Order",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully deleted by orderid and store id", response = Object.class),
            @ApiResponse(code = 400, message = "invalid input, order object invalid")})
    @RequestMapping(value = "/order/{orderID}/store/{storeID}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStoreByIDAndOrderID(@ApiParam(value = "orderID that needs to be updated", required = true) @PathVariable("orderID") String orderID, @ApiParam(value = "pizza Id that is deleted", required = true) @PathVariable("storeID") String storeID);


}
